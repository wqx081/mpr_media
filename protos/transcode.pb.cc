// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transcode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transcode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transcoder {

namespace {

const ::google::protobuf::Descriptor* AudioData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranscodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranscodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranscodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranscodeResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transcode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_transcode_2eproto() {
  protobuf_AddDesc_transcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transcode.proto");
  GOOGLE_CHECK(file != NULL);
  AudioData_descriptor_ = file->message_type(0);
  static const int AudioData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, sample_),
  };
  AudioData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AudioData_descriptor_,
      AudioData::default_instance_,
      AudioData_offsets_,
      -1,
      -1,
      -1,
      sizeof(AudioData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _is_default_instance_));
  VideoData_descriptor_ = file->message_type(1);
  static const int VideoData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoData, frame_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoData, frame_aspect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoData, frame_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoData, rate_bit_),
  };
  VideoData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoData_descriptor_,
      VideoData::default_instance_,
      VideoData_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoData, _is_default_instance_));
  SegmentData_descriptor_ = file->message_type(2);
  static const int SegmentData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentData, url_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentData, m3u8_name_),
  };
  SegmentData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SegmentData_descriptor_,
      SegmentData::default_instance_,
      SegmentData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SegmentData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentData, _is_default_instance_));
  TranscodeRequest_descriptor_ = file->message_type(3);
  static const int TranscodeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, media_source_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, media_target_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, audio_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, video_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, segment_data_),
  };
  TranscodeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TranscodeRequest_descriptor_,
      TranscodeRequest::default_instance_,
      TranscodeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TranscodeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequest, _is_default_instance_));
  TranscodeResponse_descriptor_ = file->message_type(4);
  static const int TranscodeResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, out_time_),
  };
  TranscodeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TranscodeResponse_descriptor_,
      TranscodeResponse::default_instance_,
      TranscodeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TranscodeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AudioData_descriptor_, &AudioData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoData_descriptor_, &VideoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SegmentData_descriptor_, &SegmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TranscodeRequest_descriptor_, &TranscodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TranscodeResponse_descriptor_, &TranscodeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transcode_2eproto() {
  delete AudioData::default_instance_;
  delete AudioData_reflection_;
  delete VideoData::default_instance_;
  delete VideoData_reflection_;
  delete SegmentData::default_instance_;
  delete SegmentData_reflection_;
  delete TranscodeRequest::default_instance_;
  delete TranscodeRequest_reflection_;
  delete TranscodeResponse::default_instance_;
  delete TranscodeResponse_reflection_;
}

void protobuf_AddDesc_transcode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_transcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017transcode.proto\022\ntranscoder\"\033\n\tAudioDa"
    "ta\022\016\n\006sample\030\001 \001(\t\"[\n\tVideoData\022\022\n\nframe"
    "_size\030\001 \001(\t\022\024\n\014frame_aspect\030\002 \001(\t\022\022\n\nfra"
    "me_rate\030\003 \001(\t\022\020\n\010rate_bit\030\004 \001(\t\"B\n\013Segme"
    "ntData\022\014\n\004time\030\001 \001(\t\022\022\n\nurl_prefix\030\002 \001(\t"
    "\022\021\n\tm3u8_name\030\003 \001(\t\"\315\001\n\020TranscodeRequest"
    "\022\031\n\021media_source_path\030\001 \001(\t\022\031\n\021media_tar"
    "get_path\030\002 \001(\t\022)\n\naudio_data\030\003 \001(\0132\025.tra"
    "nscoder.AudioData\022)\n\nvideo_data\030\004 \001(\0132\025."
    "transcoder.VideoData\022-\n\014segment_data\030\005 \001"
    "(\0132\027.transcoder.SegmentData\"\217\001\n\021Transcod"
    "eResponse\022\r\n\005frame\030\001 \001(\t\022\013\n\003fps\030\002 \001(\t\022\014\n"
    "\004size\030\003 \001(\t\022\014\n\004time\030\004 \001(\t\022\017\n\007bitrate\030\005 \001"
    "(\t\022\r\n\005speed\030\006 \001(\t\022\020\n\010duration\030\007 \001(\t\022\020\n\010o"
    "ut_time\030\010 \001(\t2Z\n\nTranscoder\022L\n\tTranscode"
    "\022\034.transcoder.TranscodeRequest\032\035.transco"
    "der.TranscodeResponse\"\0000\001b\006proto3", 673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transcode.proto", &protobuf_RegisterTypes);
  AudioData::default_instance_ = new AudioData();
  VideoData::default_instance_ = new VideoData();
  SegmentData::default_instance_ = new SegmentData();
  TranscodeRequest::default_instance_ = new TranscodeRequest();
  TranscodeResponse::default_instance_ = new TranscodeResponse();
  AudioData::default_instance_->InitAsDefaultInstance();
  VideoData::default_instance_->InitAsDefaultInstance();
  SegmentData::default_instance_->InitAsDefaultInstance();
  TranscodeRequest::default_instance_->InitAsDefaultInstance();
  TranscodeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transcode_2eproto {
  StaticDescriptorInitializer_transcode_2eproto() {
    protobuf_AddDesc_transcode_2eproto();
  }
} static_descriptor_initializer_transcode_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioData::kSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioData::AudioData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcoder.AudioData)
}

void AudioData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AudioData::AudioData(const AudioData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transcoder.AudioData)
}

void AudioData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sample_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:transcoder.AudioData)
  SharedDtor();
}

void AudioData::SharedDtor() {
  sample_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AudioData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioData_descriptor_;
}

const AudioData& AudioData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transcode_2eproto();
  return *default_instance_;
}

AudioData* AudioData::default_instance_ = NULL;

AudioData* AudioData::New(::google::protobuf::Arena* arena) const {
  AudioData* n = new AudioData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:transcoder.AudioData)
  sample_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AudioData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcoder.AudioData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sample = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample().data(), this->sample().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.AudioData.sample"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcoder.AudioData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcoder.AudioData)
  return false;
#undef DO_
}

void AudioData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcoder.AudioData)
  // optional string sample = 1;
  if (this->sample().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample().data(), this->sample().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.AudioData.sample");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sample(), output);
  }

  // @@protoc_insertion_point(serialize_end:transcoder.AudioData)
}

::google::protobuf::uint8* AudioData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transcoder.AudioData)
  // optional string sample = 1;
  if (this->sample().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample().data(), this->sample().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.AudioData.sample");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sample(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transcoder.AudioData)
  return target;
}

int AudioData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:transcoder.AudioData)
  int total_size = 0;

  // optional string sample = 1;
  if (this->sample().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcoder.AudioData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AudioData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcoder.AudioData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcoder.AudioData)
    MergeFrom(*source);
  }
}

void AudioData::MergeFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcoder.AudioData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sample().size() > 0) {

    sample_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_);
  }
}

void AudioData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcoder.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioData::CopyFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcoder.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {

  return true;
}

void AudioData::Swap(AudioData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioData::InternalSwap(AudioData* other) {
  sample_.Swap(&other->sample_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioData_descriptor_;
  metadata.reflection = AudioData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioData

// optional string sample = 1;
void AudioData::clear_sample() {
  sample_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AudioData::sample() const {
  // @@protoc_insertion_point(field_get:transcoder.AudioData.sample)
  return sample_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioData::set_sample(const ::std::string& value) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.AudioData.sample)
}
 void AudioData::set_sample(const char* value) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.AudioData.sample)
}
 void AudioData::set_sample(const char* value, size_t size) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.AudioData.sample)
}
 ::std::string* AudioData::mutable_sample() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.AudioData.sample)
  return sample_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AudioData::release_sample() {
  // @@protoc_insertion_point(field_release:transcoder.AudioData.sample)
  
  return sample_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioData::set_allocated_sample(::std::string* sample) {
  if (sample != NULL) {
    
  } else {
    
  }
  sample_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample);
  // @@protoc_insertion_point(field_set_allocated:transcoder.AudioData.sample)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoData::kFrameSizeFieldNumber;
const int VideoData::kFrameAspectFieldNumber;
const int VideoData::kFrameRateFieldNumber;
const int VideoData::kRateBitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoData::VideoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcoder.VideoData)
}

void VideoData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VideoData::VideoData(const VideoData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transcoder.VideoData)
}

void VideoData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_aspect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_rate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rate_bit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VideoData::~VideoData() {
  // @@protoc_insertion_point(destructor:transcoder.VideoData)
  SharedDtor();
}

void VideoData::SharedDtor() {
  frame_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_aspect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_rate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rate_bit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VideoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoData_descriptor_;
}

const VideoData& VideoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transcode_2eproto();
  return *default_instance_;
}

VideoData* VideoData::default_instance_ = NULL;

VideoData* VideoData::New(::google::protobuf::Arena* arena) const {
  VideoData* n = new VideoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoData::Clear() {
// @@protoc_insertion_point(message_clear_start:transcoder.VideoData)
  frame_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_aspect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rate_bit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VideoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcoder.VideoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string frame_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_size().data(), this->frame_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.VideoData.frame_size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame_aspect;
        break;
      }

      // optional string frame_aspect = 2;
      case 2: {
        if (tag == 18) {
         parse_frame_aspect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_aspect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_aspect().data(), this->frame_aspect().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.VideoData.frame_aspect"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frame_rate;
        break;
      }

      // optional string frame_rate = 3;
      case 3: {
        if (tag == 26) {
         parse_frame_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_rate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_rate().data(), this->frame_rate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.VideoData.frame_rate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rate_bit;
        break;
      }

      // optional string rate_bit = 4;
      case 4: {
        if (tag == 34) {
         parse_rate_bit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rate_bit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rate_bit().data(), this->rate_bit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.VideoData.rate_bit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcoder.VideoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcoder.VideoData)
  return false;
#undef DO_
}

void VideoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcoder.VideoData)
  // optional string frame_size = 1;
  if (this->frame_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_size().data(), this->frame_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.frame_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame_size(), output);
  }

  // optional string frame_aspect = 2;
  if (this->frame_aspect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_aspect().data(), this->frame_aspect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.frame_aspect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_aspect(), output);
  }

  // optional string frame_rate = 3;
  if (this->frame_rate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_rate().data(), this->frame_rate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.frame_rate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->frame_rate(), output);
  }

  // optional string rate_bit = 4;
  if (this->rate_bit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rate_bit().data(), this->rate_bit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.rate_bit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rate_bit(), output);
  }

  // @@protoc_insertion_point(serialize_end:transcoder.VideoData)
}

::google::protobuf::uint8* VideoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transcoder.VideoData)
  // optional string frame_size = 1;
  if (this->frame_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_size().data(), this->frame_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.frame_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame_size(), target);
  }

  // optional string frame_aspect = 2;
  if (this->frame_aspect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_aspect().data(), this->frame_aspect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.frame_aspect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_aspect(), target);
  }

  // optional string frame_rate = 3;
  if (this->frame_rate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_rate().data(), this->frame_rate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.frame_rate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_rate(), target);
  }

  // optional string rate_bit = 4;
  if (this->rate_bit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rate_bit().data(), this->rate_bit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.VideoData.rate_bit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rate_bit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transcoder.VideoData)
  return target;
}

int VideoData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:transcoder.VideoData)
  int total_size = 0;

  // optional string frame_size = 1;
  if (this->frame_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_size());
  }

  // optional string frame_aspect = 2;
  if (this->frame_aspect().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_aspect());
  }

  // optional string frame_rate = 3;
  if (this->frame_rate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_rate());
  }

  // optional string rate_bit = 4;
  if (this->rate_bit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rate_bit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcoder.VideoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VideoData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcoder.VideoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcoder.VideoData)
    MergeFrom(*source);
  }
}

void VideoData::MergeFrom(const VideoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcoder.VideoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame_size().size() > 0) {

    frame_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_size_);
  }
  if (from.frame_aspect().size() > 0) {

    frame_aspect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_aspect_);
  }
  if (from.frame_rate().size() > 0) {

    frame_rate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_rate_);
  }
  if (from.rate_bit().size() > 0) {

    rate_bit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rate_bit_);
  }
}

void VideoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcoder.VideoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoData::CopyFrom(const VideoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcoder.VideoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoData::IsInitialized() const {

  return true;
}

void VideoData::Swap(VideoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoData::InternalSwap(VideoData* other) {
  frame_size_.Swap(&other->frame_size_);
  frame_aspect_.Swap(&other->frame_aspect_);
  frame_rate_.Swap(&other->frame_rate_);
  rate_bit_.Swap(&other->rate_bit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoData_descriptor_;
  metadata.reflection = VideoData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoData

// optional string frame_size = 1;
void VideoData::clear_frame_size() {
  frame_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoData::frame_size() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.frame_size)
  return frame_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_frame_size(const ::std::string& value) {
  
  frame_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.frame_size)
}
 void VideoData::set_frame_size(const char* value) {
  
  frame_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.frame_size)
}
 void VideoData::set_frame_size(const char* value, size_t size) {
  
  frame_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.frame_size)
}
 ::std::string* VideoData::mutable_frame_size() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.frame_size)
  return frame_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoData::release_frame_size() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.frame_size)
  
  return frame_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_allocated_frame_size(::std::string* frame_size) {
  if (frame_size != NULL) {
    
  } else {
    
  }
  frame_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_size);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.frame_size)
}

// optional string frame_aspect = 2;
void VideoData::clear_frame_aspect() {
  frame_aspect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoData::frame_aspect() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.frame_aspect)
  return frame_aspect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_frame_aspect(const ::std::string& value) {
  
  frame_aspect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.frame_aspect)
}
 void VideoData::set_frame_aspect(const char* value) {
  
  frame_aspect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.frame_aspect)
}
 void VideoData::set_frame_aspect(const char* value, size_t size) {
  
  frame_aspect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.frame_aspect)
}
 ::std::string* VideoData::mutable_frame_aspect() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.frame_aspect)
  return frame_aspect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoData::release_frame_aspect() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.frame_aspect)
  
  return frame_aspect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_allocated_frame_aspect(::std::string* frame_aspect) {
  if (frame_aspect != NULL) {
    
  } else {
    
  }
  frame_aspect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_aspect);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.frame_aspect)
}

// optional string frame_rate = 3;
void VideoData::clear_frame_rate() {
  frame_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoData::frame_rate() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.frame_rate)
  return frame_rate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_frame_rate(const ::std::string& value) {
  
  frame_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.frame_rate)
}
 void VideoData::set_frame_rate(const char* value) {
  
  frame_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.frame_rate)
}
 void VideoData::set_frame_rate(const char* value, size_t size) {
  
  frame_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.frame_rate)
}
 ::std::string* VideoData::mutable_frame_rate() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.frame_rate)
  return frame_rate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoData::release_frame_rate() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.frame_rate)
  
  return frame_rate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_allocated_frame_rate(::std::string* frame_rate) {
  if (frame_rate != NULL) {
    
  } else {
    
  }
  frame_rate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_rate);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.frame_rate)
}

// optional string rate_bit = 4;
void VideoData::clear_rate_bit() {
  rate_bit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoData::rate_bit() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.rate_bit)
  return rate_bit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_rate_bit(const ::std::string& value) {
  
  rate_bit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.rate_bit)
}
 void VideoData::set_rate_bit(const char* value) {
  
  rate_bit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.rate_bit)
}
 void VideoData::set_rate_bit(const char* value, size_t size) {
  
  rate_bit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.rate_bit)
}
 ::std::string* VideoData::mutable_rate_bit() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.rate_bit)
  return rate_bit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoData::release_rate_bit() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.rate_bit)
  
  return rate_bit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoData::set_allocated_rate_bit(::std::string* rate_bit) {
  if (rate_bit != NULL) {
    
  } else {
    
  }
  rate_bit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rate_bit);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.rate_bit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentData::kTimeFieldNumber;
const int SegmentData::kUrlPrefixFieldNumber;
const int SegmentData::kM3U8NameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentData::SegmentData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcoder.SegmentData)
}

void SegmentData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SegmentData::SegmentData(const SegmentData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transcoder.SegmentData)
}

void SegmentData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m3u8_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SegmentData::~SegmentData() {
  // @@protoc_insertion_point(destructor:transcoder.SegmentData)
  SharedDtor();
}

void SegmentData::SharedDtor() {
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m3u8_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SegmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentData_descriptor_;
}

const SegmentData& SegmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transcode_2eproto();
  return *default_instance_;
}

SegmentData* SegmentData::default_instance_ = NULL;

SegmentData* SegmentData::New(::google::protobuf::Arena* arena) const {
  SegmentData* n = new SegmentData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SegmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:transcoder.SegmentData)
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m3u8_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SegmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcoder.SegmentData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.SegmentData.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url_prefix;
        break;
      }

      // optional string url_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_url_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url_prefix().data(), this->url_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.SegmentData.url_prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m3u8_name;
        break;
      }

      // optional string m3u8_name = 3;
      case 3: {
        if (tag == 26) {
         parse_m3u8_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m3u8_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->m3u8_name().data(), this->m3u8_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.SegmentData.m3u8_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcoder.SegmentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcoder.SegmentData)
  return false;
#undef DO_
}

void SegmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcoder.SegmentData)
  // optional string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.SegmentData.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time(), output);
  }

  // optional string url_prefix = 2;
  if (this->url_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.SegmentData.url_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_prefix(), output);
  }

  // optional string m3u8_name = 3;
  if (this->m3u8_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->m3u8_name().data(), this->m3u8_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.SegmentData.m3u8_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->m3u8_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:transcoder.SegmentData)
}

::google::protobuf::uint8* SegmentData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transcoder.SegmentData)
  // optional string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.SegmentData.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  // optional string url_prefix = 2;
  if (this->url_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.SegmentData.url_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_prefix(), target);
  }

  // optional string m3u8_name = 3;
  if (this->m3u8_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->m3u8_name().data(), this->m3u8_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.SegmentData.m3u8_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m3u8_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transcoder.SegmentData)
  return target;
}

int SegmentData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:transcoder.SegmentData)
  int total_size = 0;

  // optional string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional string url_prefix = 2;
  if (this->url_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url_prefix());
  }

  // optional string m3u8_name = 3;
  if (this->m3u8_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m3u8_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcoder.SegmentData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SegmentData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SegmentData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcoder.SegmentData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcoder.SegmentData)
    MergeFrom(*source);
  }
}

void SegmentData::MergeFrom(const SegmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcoder.SegmentData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.url_prefix().size() > 0) {

    url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_prefix_);
  }
  if (from.m3u8_name().size() > 0) {

    m3u8_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m3u8_name_);
  }
}

void SegmentData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcoder.SegmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentData::CopyFrom(const SegmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcoder.SegmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentData::IsInitialized() const {

  return true;
}

void SegmentData::Swap(SegmentData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentData::InternalSwap(SegmentData* other) {
  time_.Swap(&other->time_);
  url_prefix_.Swap(&other->url_prefix_);
  m3u8_name_.Swap(&other->m3u8_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SegmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentData_descriptor_;
  metadata.reflection = SegmentData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SegmentData

// optional string time = 1;
void SegmentData::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SegmentData::time() const {
  // @@protoc_insertion_point(field_get:transcoder.SegmentData.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentData::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.SegmentData.time)
}
 void SegmentData::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.SegmentData.time)
}
 void SegmentData::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.SegmentData.time)
}
 ::std::string* SegmentData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.SegmentData.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SegmentData::release_time() {
  // @@protoc_insertion_point(field_release:transcoder.SegmentData.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:transcoder.SegmentData.time)
}

// optional string url_prefix = 2;
void SegmentData::clear_url_prefix() {
  url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SegmentData::url_prefix() const {
  // @@protoc_insertion_point(field_get:transcoder.SegmentData.url_prefix)
  return url_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentData::set_url_prefix(const ::std::string& value) {
  
  url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.SegmentData.url_prefix)
}
 void SegmentData::set_url_prefix(const char* value) {
  
  url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.SegmentData.url_prefix)
}
 void SegmentData::set_url_prefix(const char* value, size_t size) {
  
  url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.SegmentData.url_prefix)
}
 ::std::string* SegmentData::mutable_url_prefix() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.SegmentData.url_prefix)
  return url_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SegmentData::release_url_prefix() {
  // @@protoc_insertion_point(field_release:transcoder.SegmentData.url_prefix)
  
  return url_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentData::set_allocated_url_prefix(::std::string* url_prefix) {
  if (url_prefix != NULL) {
    
  } else {
    
  }
  url_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_prefix);
  // @@protoc_insertion_point(field_set_allocated:transcoder.SegmentData.url_prefix)
}

// optional string m3u8_name = 3;
void SegmentData::clear_m3u8_name() {
  m3u8_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SegmentData::m3u8_name() const {
  // @@protoc_insertion_point(field_get:transcoder.SegmentData.m3u8_name)
  return m3u8_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentData::set_m3u8_name(const ::std::string& value) {
  
  m3u8_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.SegmentData.m3u8_name)
}
 void SegmentData::set_m3u8_name(const char* value) {
  
  m3u8_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.SegmentData.m3u8_name)
}
 void SegmentData::set_m3u8_name(const char* value, size_t size) {
  
  m3u8_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.SegmentData.m3u8_name)
}
 ::std::string* SegmentData::mutable_m3u8_name() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.SegmentData.m3u8_name)
  return m3u8_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SegmentData::release_m3u8_name() {
  // @@protoc_insertion_point(field_release:transcoder.SegmentData.m3u8_name)
  
  return m3u8_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentData::set_allocated_m3u8_name(::std::string* m3u8_name) {
  if (m3u8_name != NULL) {
    
  } else {
    
  }
  m3u8_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m3u8_name);
  // @@protoc_insertion_point(field_set_allocated:transcoder.SegmentData.m3u8_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscodeRequest::kMediaSourcePathFieldNumber;
const int TranscodeRequest::kMediaTargetPathFieldNumber;
const int TranscodeRequest::kAudioDataFieldNumber;
const int TranscodeRequest::kVideoDataFieldNumber;
const int TranscodeRequest::kSegmentDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscodeRequest::TranscodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcoder.TranscodeRequest)
}

void TranscodeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  audio_data_ = const_cast< ::transcoder::AudioData*>(&::transcoder::AudioData::default_instance());
  video_data_ = const_cast< ::transcoder::VideoData*>(&::transcoder::VideoData::default_instance());
  segment_data_ = const_cast< ::transcoder::SegmentData*>(&::transcoder::SegmentData::default_instance());
}

TranscodeRequest::TranscodeRequest(const TranscodeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transcoder.TranscodeRequest)
}

void TranscodeRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_source_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_target_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_data_ = NULL;
  video_data_ = NULL;
  segment_data_ = NULL;
}

TranscodeRequest::~TranscodeRequest() {
  // @@protoc_insertion_point(destructor:transcoder.TranscodeRequest)
  SharedDtor();
}

void TranscodeRequest::SharedDtor() {
  media_source_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_target_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete audio_data_;
    delete video_data_;
    delete segment_data_;
  }
}

void TranscodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranscodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranscodeRequest_descriptor_;
}

const TranscodeRequest& TranscodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transcode_2eproto();
  return *default_instance_;
}

TranscodeRequest* TranscodeRequest::default_instance_ = NULL;

TranscodeRequest* TranscodeRequest::New(::google::protobuf::Arena* arena) const {
  TranscodeRequest* n = new TranscodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TranscodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:transcoder.TranscodeRequest)
  media_source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_target_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && audio_data_ != NULL) delete audio_data_;
  audio_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && video_data_ != NULL) delete video_data_;
  video_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && segment_data_ != NULL) delete segment_data_;
  segment_data_ = NULL;
}

bool TranscodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcoder.TranscodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_source_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_source_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_source_path().data(), this->media_source_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeRequest.media_source_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_target_path;
        break;
      }

      // optional string media_target_path = 2;
      case 2: {
        if (tag == 18) {
         parse_media_target_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_target_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_target_path().data(), this->media_target_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeRequest.media_target_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_audio_data;
        break;
      }

      // optional .transcoder.AudioData audio_data = 3;
      case 3: {
        if (tag == 26) {
         parse_audio_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_video_data;
        break;
      }

      // optional .transcoder.VideoData video_data = 4;
      case 4: {
        if (tag == 34) {
         parse_video_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_segment_data;
        break;
      }

      // optional .transcoder.SegmentData segment_data = 5;
      case 5: {
        if (tag == 42) {
         parse_segment_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcoder.TranscodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcoder.TranscodeRequest)
  return false;
#undef DO_
}

void TranscodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcoder.TranscodeRequest)
  // optional string media_source_path = 1;
  if (this->media_source_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_source_path().data(), this->media_source_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeRequest.media_source_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_source_path(), output);
  }

  // optional string media_target_path = 2;
  if (this->media_target_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_target_path().data(), this->media_target_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeRequest.media_target_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_target_path(), output);
  }

  // optional .transcoder.AudioData audio_data = 3;
  if (this->has_audio_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->audio_data_, output);
  }

  // optional .transcoder.VideoData video_data = 4;
  if (this->has_video_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->video_data_, output);
  }

  // optional .transcoder.SegmentData segment_data = 5;
  if (this->has_segment_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->segment_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:transcoder.TranscodeRequest)
}

::google::protobuf::uint8* TranscodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transcoder.TranscodeRequest)
  // optional string media_source_path = 1;
  if (this->media_source_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_source_path().data(), this->media_source_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeRequest.media_source_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_source_path(), target);
  }

  // optional string media_target_path = 2;
  if (this->media_target_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_target_path().data(), this->media_target_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeRequest.media_target_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->media_target_path(), target);
  }

  // optional .transcoder.AudioData audio_data = 3;
  if (this->has_audio_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->audio_data_, false, target);
  }

  // optional .transcoder.VideoData video_data = 4;
  if (this->has_video_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->video_data_, false, target);
  }

  // optional .transcoder.SegmentData segment_data = 5;
  if (this->has_segment_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->segment_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transcoder.TranscodeRequest)
  return target;
}

int TranscodeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:transcoder.TranscodeRequest)
  int total_size = 0;

  // optional string media_source_path = 1;
  if (this->media_source_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_source_path());
  }

  // optional string media_target_path = 2;
  if (this->media_target_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_target_path());
  }

  // optional .transcoder.AudioData audio_data = 3;
  if (this->has_audio_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_data_);
  }

  // optional .transcoder.VideoData video_data = 4;
  if (this->has_video_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_data_);
  }

  // optional .transcoder.SegmentData segment_data = 5;
  if (this->has_segment_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segment_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranscodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcoder.TranscodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TranscodeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TranscodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcoder.TranscodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcoder.TranscodeRequest)
    MergeFrom(*source);
  }
}

void TranscodeRequest::MergeFrom(const TranscodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcoder.TranscodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.media_source_path().size() > 0) {

    media_source_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_source_path_);
  }
  if (from.media_target_path().size() > 0) {

    media_target_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_target_path_);
  }
  if (from.has_audio_data()) {
    mutable_audio_data()->::transcoder::AudioData::MergeFrom(from.audio_data());
  }
  if (from.has_video_data()) {
    mutable_video_data()->::transcoder::VideoData::MergeFrom(from.video_data());
  }
  if (from.has_segment_data()) {
    mutable_segment_data()->::transcoder::SegmentData::MergeFrom(from.segment_data());
  }
}

void TranscodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcoder.TranscodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscodeRequest::CopyFrom(const TranscodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcoder.TranscodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscodeRequest::IsInitialized() const {

  return true;
}

void TranscodeRequest::Swap(TranscodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranscodeRequest::InternalSwap(TranscodeRequest* other) {
  media_source_path_.Swap(&other->media_source_path_);
  media_target_path_.Swap(&other->media_target_path_);
  std::swap(audio_data_, other->audio_data_);
  std::swap(video_data_, other->video_data_);
  std::swap(segment_data_, other->segment_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TranscodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranscodeRequest_descriptor_;
  metadata.reflection = TranscodeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TranscodeRequest

// optional string media_source_path = 1;
void TranscodeRequest::clear_media_source_path() {
  media_source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeRequest::media_source_path() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.media_source_path)
  return media_source_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeRequest::set_media_source_path(const ::std::string& value) {
  
  media_source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeRequest.media_source_path)
}
 void TranscodeRequest::set_media_source_path(const char* value) {
  
  media_source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeRequest.media_source_path)
}
 void TranscodeRequest::set_media_source_path(const char* value, size_t size) {
  
  media_source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeRequest.media_source_path)
}
 ::std::string* TranscodeRequest::mutable_media_source_path() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.media_source_path)
  return media_source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeRequest::release_media_source_path() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.media_source_path)
  
  return media_source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeRequest::set_allocated_media_source_path(::std::string* media_source_path) {
  if (media_source_path != NULL) {
    
  } else {
    
  }
  media_source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_source_path);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.media_source_path)
}

// optional string media_target_path = 2;
void TranscodeRequest::clear_media_target_path() {
  media_target_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeRequest::media_target_path() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.media_target_path)
  return media_target_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeRequest::set_media_target_path(const ::std::string& value) {
  
  media_target_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeRequest.media_target_path)
}
 void TranscodeRequest::set_media_target_path(const char* value) {
  
  media_target_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeRequest.media_target_path)
}
 void TranscodeRequest::set_media_target_path(const char* value, size_t size) {
  
  media_target_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeRequest.media_target_path)
}
 ::std::string* TranscodeRequest::mutable_media_target_path() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.media_target_path)
  return media_target_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeRequest::release_media_target_path() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.media_target_path)
  
  return media_target_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeRequest::set_allocated_media_target_path(::std::string* media_target_path) {
  if (media_target_path != NULL) {
    
  } else {
    
  }
  media_target_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_target_path);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.media_target_path)
}

// optional .transcoder.AudioData audio_data = 3;
bool TranscodeRequest::has_audio_data() const {
  return !_is_default_instance_ && audio_data_ != NULL;
}
void TranscodeRequest::clear_audio_data() {
  if (GetArenaNoVirtual() == NULL && audio_data_ != NULL) delete audio_data_;
  audio_data_ = NULL;
}
const ::transcoder::AudioData& TranscodeRequest::audio_data() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.audio_data)
  return audio_data_ != NULL ? *audio_data_ : *default_instance_->audio_data_;
}
::transcoder::AudioData* TranscodeRequest::mutable_audio_data() {
  
  if (audio_data_ == NULL) {
    audio_data_ = new ::transcoder::AudioData;
  }
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.audio_data)
  return audio_data_;
}
::transcoder::AudioData* TranscodeRequest::release_audio_data() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.audio_data)
  
  ::transcoder::AudioData* temp = audio_data_;
  audio_data_ = NULL;
  return temp;
}
void TranscodeRequest::set_allocated_audio_data(::transcoder::AudioData* audio_data) {
  delete audio_data_;
  audio_data_ = audio_data;
  if (audio_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.audio_data)
}

// optional .transcoder.VideoData video_data = 4;
bool TranscodeRequest::has_video_data() const {
  return !_is_default_instance_ && video_data_ != NULL;
}
void TranscodeRequest::clear_video_data() {
  if (GetArenaNoVirtual() == NULL && video_data_ != NULL) delete video_data_;
  video_data_ = NULL;
}
const ::transcoder::VideoData& TranscodeRequest::video_data() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.video_data)
  return video_data_ != NULL ? *video_data_ : *default_instance_->video_data_;
}
::transcoder::VideoData* TranscodeRequest::mutable_video_data() {
  
  if (video_data_ == NULL) {
    video_data_ = new ::transcoder::VideoData;
  }
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.video_data)
  return video_data_;
}
::transcoder::VideoData* TranscodeRequest::release_video_data() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.video_data)
  
  ::transcoder::VideoData* temp = video_data_;
  video_data_ = NULL;
  return temp;
}
void TranscodeRequest::set_allocated_video_data(::transcoder::VideoData* video_data) {
  delete video_data_;
  video_data_ = video_data;
  if (video_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.video_data)
}

// optional .transcoder.SegmentData segment_data = 5;
bool TranscodeRequest::has_segment_data() const {
  return !_is_default_instance_ && segment_data_ != NULL;
}
void TranscodeRequest::clear_segment_data() {
  if (GetArenaNoVirtual() == NULL && segment_data_ != NULL) delete segment_data_;
  segment_data_ = NULL;
}
const ::transcoder::SegmentData& TranscodeRequest::segment_data() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.segment_data)
  return segment_data_ != NULL ? *segment_data_ : *default_instance_->segment_data_;
}
::transcoder::SegmentData* TranscodeRequest::mutable_segment_data() {
  
  if (segment_data_ == NULL) {
    segment_data_ = new ::transcoder::SegmentData;
  }
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.segment_data)
  return segment_data_;
}
::transcoder::SegmentData* TranscodeRequest::release_segment_data() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.segment_data)
  
  ::transcoder::SegmentData* temp = segment_data_;
  segment_data_ = NULL;
  return temp;
}
void TranscodeRequest::set_allocated_segment_data(::transcoder::SegmentData* segment_data) {
  delete segment_data_;
  segment_data_ = segment_data;
  if (segment_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.segment_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscodeResponse::kFrameFieldNumber;
const int TranscodeResponse::kFpsFieldNumber;
const int TranscodeResponse::kSizeFieldNumber;
const int TranscodeResponse::kTimeFieldNumber;
const int TranscodeResponse::kBitrateFieldNumber;
const int TranscodeResponse::kSpeedFieldNumber;
const int TranscodeResponse::kDurationFieldNumber;
const int TranscodeResponse::kOutTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscodeResponse::TranscodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcoder.TranscodeResponse)
}

void TranscodeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TranscodeResponse::TranscodeResponse(const TranscodeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transcoder.TranscodeResponse)
}

void TranscodeResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TranscodeResponse::~TranscodeResponse() {
  // @@protoc_insertion_point(destructor:transcoder.TranscodeResponse)
  SharedDtor();
}

void TranscodeResponse::SharedDtor() {
  frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TranscodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranscodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranscodeResponse_descriptor_;
}

const TranscodeResponse& TranscodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transcode_2eproto();
  return *default_instance_;
}

TranscodeResponse* TranscodeResponse::default_instance_ = NULL;

TranscodeResponse* TranscodeResponse::New(::google::protobuf::Arena* arena) const {
  TranscodeResponse* n = new TranscodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TranscodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:transcoder.TranscodeResponse)
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TranscodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcoder.TranscodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string frame = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame().data(), this->frame().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.frame"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fps;
        break;
      }

      // optional string fps = 2;
      case 2: {
        if (tag == 18) {
         parse_fps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fps()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fps().data(), this->fps().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.fps"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional string size = 3;
      case 3: {
        if (tag == 26) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->size().data(), this->size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.size"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // optional string time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bitrate;
        break;
      }

      // optional string bitrate = 5;
      case 5: {
        if (tag == 42) {
         parse_bitrate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitrate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bitrate().data(), this->bitrate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.bitrate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_speed;
        break;
      }

      // optional string speed = 6;
      case 6: {
        if (tag == 50) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->speed().data(), this->speed().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.speed"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_duration;
        break;
      }

      // optional string duration = 7;
      case 7: {
        if (tag == 58) {
         parse_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->duration().data(), this->duration().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.duration"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_out_time;
        break;
      }

      // optional string out_time = 8;
      case 8: {
        if (tag == 66) {
         parse_out_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->out_time().data(), this->out_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcoder.TranscodeResponse.out_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcoder.TranscodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcoder.TranscodeResponse)
  return false;
#undef DO_
}

void TranscodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcoder.TranscodeResponse)
  // optional string frame = 1;
  if (this->frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame(), output);
  }

  // optional string fps = 2;
  if (this->fps().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fps().data(), this->fps().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.fps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fps(), output);
  }

  // optional string size = 3;
  if (this->size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->size(), output);
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  // optional string bitrate = 5;
  if (this->bitrate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bitrate().data(), this->bitrate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.bitrate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bitrate(), output);
  }

  // optional string speed = 6;
  if (this->speed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speed().data(), this->speed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.speed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->speed(), output);
  }

  // optional string duration = 7;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), this->duration().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.duration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->duration(), output);
  }

  // optional string out_time = 8;
  if (this->out_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->out_time().data(), this->out_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.out_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->out_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:transcoder.TranscodeResponse)
}

::google::protobuf::uint8* TranscodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transcoder.TranscodeResponse)
  // optional string frame = 1;
  if (this->frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame(), target);
  }

  // optional string fps = 2;
  if (this->fps().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fps().data(), this->fps().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.fps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fps(), target);
  }

  // optional string size = 3;
  if (this->size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->size(), target);
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // optional string bitrate = 5;
  if (this->bitrate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bitrate().data(), this->bitrate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.bitrate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bitrate(), target);
  }

  // optional string speed = 6;
  if (this->speed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speed().data(), this->speed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.speed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->speed(), target);
  }

  // optional string duration = 7;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), this->duration().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.duration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->duration(), target);
  }

  // optional string out_time = 8;
  if (this->out_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->out_time().data(), this->out_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcoder.TranscodeResponse.out_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->out_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transcoder.TranscodeResponse)
  return target;
}

int TranscodeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:transcoder.TranscodeResponse)
  int total_size = 0;

  // optional string frame = 1;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame());
  }

  // optional string fps = 2;
  if (this->fps().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fps());
  }

  // optional string size = 3;
  if (this->size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->size());
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional string bitrate = 5;
  if (this->bitrate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bitrate());
  }

  // optional string speed = 6;
  if (this->speed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speed());
  }

  // optional string duration = 7;
  if (this->duration().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->duration());
  }

  // optional string out_time = 8;
  if (this->out_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out_time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranscodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcoder.TranscodeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TranscodeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TranscodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcoder.TranscodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcoder.TranscodeResponse)
    MergeFrom(*source);
  }
}

void TranscodeResponse::MergeFrom(const TranscodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcoder.TranscodeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from.fps().size() > 0) {

    fps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fps_);
  }
  if (from.size().size() > 0) {

    size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.size_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.bitrate().size() > 0) {

    bitrate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_);
  }
  if (from.speed().size() > 0) {

    speed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speed_);
  }
  if (from.duration().size() > 0) {

    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  if (from.out_time().size() > 0) {

    out_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_time_);
  }
}

void TranscodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcoder.TranscodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscodeResponse::CopyFrom(const TranscodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcoder.TranscodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscodeResponse::IsInitialized() const {

  return true;
}

void TranscodeResponse::Swap(TranscodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranscodeResponse::InternalSwap(TranscodeResponse* other) {
  frame_.Swap(&other->frame_);
  fps_.Swap(&other->fps_);
  size_.Swap(&other->size_);
  time_.Swap(&other->time_);
  bitrate_.Swap(&other->bitrate_);
  speed_.Swap(&other->speed_);
  duration_.Swap(&other->duration_);
  out_time_.Swap(&other->out_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TranscodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranscodeResponse_descriptor_;
  metadata.reflection = TranscodeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TranscodeResponse

// optional string frame = 1;
void TranscodeResponse::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::frame() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.frame)
  return frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_frame(const ::std::string& value) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.frame)
}
 void TranscodeResponse::set_frame(const char* value) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.frame)
}
 void TranscodeResponse::set_frame(const char* value, size_t size) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.frame)
}
 ::std::string* TranscodeResponse::mutable_frame() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_frame() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.frame)
  
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    
  } else {
    
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.frame)
}

// optional string fps = 2;
void TranscodeResponse::clear_fps() {
  fps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::fps() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.fps)
  return fps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_fps(const ::std::string& value) {
  
  fps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.fps)
}
 void TranscodeResponse::set_fps(const char* value) {
  
  fps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.fps)
}
 void TranscodeResponse::set_fps(const char* value, size_t size) {
  
  fps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.fps)
}
 ::std::string* TranscodeResponse::mutable_fps() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.fps)
  return fps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_fps() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.fps)
  
  return fps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_fps(::std::string* fps) {
  if (fps != NULL) {
    
  } else {
    
  }
  fps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fps);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.fps)
}

// optional string size = 3;
void TranscodeResponse::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::size() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.size)
  return size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_size(const ::std::string& value) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.size)
}
 void TranscodeResponse::set_size(const char* value) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.size)
}
 void TranscodeResponse::set_size(const char* value, size_t size) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.size)
}
 ::std::string* TranscodeResponse::mutable_size() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_size() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.size)
  
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    
  } else {
    
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.size)
}

// optional string time = 4;
void TranscodeResponse::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::time() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.time)
}
 void TranscodeResponse::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.time)
}
 void TranscodeResponse::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.time)
}
 ::std::string* TranscodeResponse::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_time() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.time)
}

// optional string bitrate = 5;
void TranscodeResponse::clear_bitrate() {
  bitrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::bitrate() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.bitrate)
  return bitrate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_bitrate(const ::std::string& value) {
  
  bitrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.bitrate)
}
 void TranscodeResponse::set_bitrate(const char* value) {
  
  bitrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.bitrate)
}
 void TranscodeResponse::set_bitrate(const char* value, size_t size) {
  
  bitrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.bitrate)
}
 ::std::string* TranscodeResponse::mutable_bitrate() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.bitrate)
  return bitrate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_bitrate() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.bitrate)
  
  return bitrate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_bitrate(::std::string* bitrate) {
  if (bitrate != NULL) {
    
  } else {
    
  }
  bitrate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.bitrate)
}

// optional string speed = 6;
void TranscodeResponse::clear_speed() {
  speed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::speed() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.speed)
  return speed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_speed(const ::std::string& value) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.speed)
}
 void TranscodeResponse::set_speed(const char* value) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.speed)
}
 void TranscodeResponse::set_speed(const char* value, size_t size) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.speed)
}
 ::std::string* TranscodeResponse::mutable_speed() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.speed)
  return speed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_speed() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.speed)
  
  return speed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_speed(::std::string* speed) {
  if (speed != NULL) {
    
  } else {
    
  }
  speed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speed);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.speed)
}

// optional string duration = 7;
void TranscodeResponse::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::duration() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.duration)
  return duration_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.duration)
}
 void TranscodeResponse::set_duration(const char* value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.duration)
}
 void TranscodeResponse::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.duration)
}
 ::std::string* TranscodeResponse::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_duration() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.duration)
}

// optional string out_time = 8;
void TranscodeResponse::clear_out_time() {
  out_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TranscodeResponse::out_time() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.out_time)
  return out_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_out_time(const ::std::string& value) {
  
  out_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.out_time)
}
 void TranscodeResponse::set_out_time(const char* value) {
  
  out_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.out_time)
}
 void TranscodeResponse::set_out_time(const char* value, size_t size) {
  
  out_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.out_time)
}
 ::std::string* TranscodeResponse::mutable_out_time() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.out_time)
  return out_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TranscodeResponse::release_out_time() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.out_time)
  
  return out_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TranscodeResponse::set_allocated_out_time(::std::string* out_time) {
  if (out_time != NULL) {
    
  } else {
    
  }
  out_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_time);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.out_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace transcoder

// @@protoc_insertion_point(global_scope)
