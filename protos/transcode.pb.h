// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transcode.proto

#ifndef PROTOBUF_transcode_2eproto__INCLUDED
#define PROTOBUF_transcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transcoder {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transcode_2eproto();
void protobuf_AssignDesc_transcode_2eproto();
void protobuf_ShutdownFile_transcode_2eproto();

class AudioData;
class SegmentData;
class TranscodeRequest;
class TranscodeResponse;
class VideoData;

// ===================================================================

class AudioData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcoder.AudioData) */ {
 public:
  AudioData();
  virtual ~AudioData();

  AudioData(const AudioData& from);

  inline AudioData& operator=(const AudioData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioData& default_instance();

  void Swap(AudioData* other);

  // implements Message ----------------------------------------------

  inline AudioData* New() const { return New(NULL); }

  AudioData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioData& from);
  void MergeFrom(const AudioData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sample = 1;
  void clear_sample();
  static const int kSampleFieldNumber = 1;
  const ::std::string& sample() const;
  void set_sample(const ::std::string& value);
  void set_sample(const char* value);
  void set_sample(const char* value, size_t size);
  ::std::string* mutable_sample();
  ::std::string* release_sample();
  void set_allocated_sample(::std::string* sample);

  // @@protoc_insertion_point(class_scope:transcoder.AudioData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sample_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transcode_2eproto();
  friend void protobuf_AssignDesc_transcode_2eproto();
  friend void protobuf_ShutdownFile_transcode_2eproto();

  void InitAsDefaultInstance();
  static AudioData* default_instance_;
};
// -------------------------------------------------------------------

class VideoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcoder.VideoData) */ {
 public:
  VideoData();
  virtual ~VideoData();

  VideoData(const VideoData& from);

  inline VideoData& operator=(const VideoData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoData& default_instance();

  void Swap(VideoData* other);

  // implements Message ----------------------------------------------

  inline VideoData* New() const { return New(NULL); }

  VideoData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoData& from);
  void MergeFrom(const VideoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string frame_size = 1;
  void clear_frame_size();
  static const int kFrameSizeFieldNumber = 1;
  const ::std::string& frame_size() const;
  void set_frame_size(const ::std::string& value);
  void set_frame_size(const char* value);
  void set_frame_size(const char* value, size_t size);
  ::std::string* mutable_frame_size();
  ::std::string* release_frame_size();
  void set_allocated_frame_size(::std::string* frame_size);

  // optional string frame_aspect = 2;
  void clear_frame_aspect();
  static const int kFrameAspectFieldNumber = 2;
  const ::std::string& frame_aspect() const;
  void set_frame_aspect(const ::std::string& value);
  void set_frame_aspect(const char* value);
  void set_frame_aspect(const char* value, size_t size);
  ::std::string* mutable_frame_aspect();
  ::std::string* release_frame_aspect();
  void set_allocated_frame_aspect(::std::string* frame_aspect);

  // optional string frame_rate = 3;
  void clear_frame_rate();
  static const int kFrameRateFieldNumber = 3;
  const ::std::string& frame_rate() const;
  void set_frame_rate(const ::std::string& value);
  void set_frame_rate(const char* value);
  void set_frame_rate(const char* value, size_t size);
  ::std::string* mutable_frame_rate();
  ::std::string* release_frame_rate();
  void set_allocated_frame_rate(::std::string* frame_rate);

  // optional string rate_bit = 4;
  void clear_rate_bit();
  static const int kRateBitFieldNumber = 4;
  const ::std::string& rate_bit() const;
  void set_rate_bit(const ::std::string& value);
  void set_rate_bit(const char* value);
  void set_rate_bit(const char* value, size_t size);
  ::std::string* mutable_rate_bit();
  ::std::string* release_rate_bit();
  void set_allocated_rate_bit(::std::string* rate_bit);

  // @@protoc_insertion_point(class_scope:transcoder.VideoData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr frame_size_;
  ::google::protobuf::internal::ArenaStringPtr frame_aspect_;
  ::google::protobuf::internal::ArenaStringPtr frame_rate_;
  ::google::protobuf::internal::ArenaStringPtr rate_bit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transcode_2eproto();
  friend void protobuf_AssignDesc_transcode_2eproto();
  friend void protobuf_ShutdownFile_transcode_2eproto();

  void InitAsDefaultInstance();
  static VideoData* default_instance_;
};
// -------------------------------------------------------------------

class SegmentData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcoder.SegmentData) */ {
 public:
  SegmentData();
  virtual ~SegmentData();

  SegmentData(const SegmentData& from);

  inline SegmentData& operator=(const SegmentData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentData& default_instance();

  void Swap(SegmentData* other);

  // implements Message ----------------------------------------------

  inline SegmentData* New() const { return New(NULL); }

  SegmentData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentData& from);
  void MergeFrom(const SegmentData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SegmentData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string url_prefix = 2;
  void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 2;
  const ::std::string& url_prefix() const;
  void set_url_prefix(const ::std::string& value);
  void set_url_prefix(const char* value);
  void set_url_prefix(const char* value, size_t size);
  ::std::string* mutable_url_prefix();
  ::std::string* release_url_prefix();
  void set_allocated_url_prefix(::std::string* url_prefix);

  // optional string m3u8_name = 3;
  void clear_m3u8_name();
  static const int kM3U8NameFieldNumber = 3;
  const ::std::string& m3u8_name() const;
  void set_m3u8_name(const ::std::string& value);
  void set_m3u8_name(const char* value);
  void set_m3u8_name(const char* value, size_t size);
  ::std::string* mutable_m3u8_name();
  ::std::string* release_m3u8_name();
  void set_allocated_m3u8_name(::std::string* m3u8_name);

  // @@protoc_insertion_point(class_scope:transcoder.SegmentData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr url_prefix_;
  ::google::protobuf::internal::ArenaStringPtr m3u8_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transcode_2eproto();
  friend void protobuf_AssignDesc_transcode_2eproto();
  friend void protobuf_ShutdownFile_transcode_2eproto();

  void InitAsDefaultInstance();
  static SegmentData* default_instance_;
};
// -------------------------------------------------------------------

class TranscodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcoder.TranscodeRequest) */ {
 public:
  TranscodeRequest();
  virtual ~TranscodeRequest();

  TranscodeRequest(const TranscodeRequest& from);

  inline TranscodeRequest& operator=(const TranscodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TranscodeRequest& default_instance();

  void Swap(TranscodeRequest* other);

  // implements Message ----------------------------------------------

  inline TranscodeRequest* New() const { return New(NULL); }

  TranscodeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranscodeRequest& from);
  void MergeFrom(const TranscodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TranscodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string media_source_path = 1;
  void clear_media_source_path();
  static const int kMediaSourcePathFieldNumber = 1;
  const ::std::string& media_source_path() const;
  void set_media_source_path(const ::std::string& value);
  void set_media_source_path(const char* value);
  void set_media_source_path(const char* value, size_t size);
  ::std::string* mutable_media_source_path();
  ::std::string* release_media_source_path();
  void set_allocated_media_source_path(::std::string* media_source_path);

  // optional string media_target_path = 2;
  void clear_media_target_path();
  static const int kMediaTargetPathFieldNumber = 2;
  const ::std::string& media_target_path() const;
  void set_media_target_path(const ::std::string& value);
  void set_media_target_path(const char* value);
  void set_media_target_path(const char* value, size_t size);
  ::std::string* mutable_media_target_path();
  ::std::string* release_media_target_path();
  void set_allocated_media_target_path(::std::string* media_target_path);

  // optional .transcoder.AudioData audio_data = 3;
  bool has_audio_data() const;
  void clear_audio_data();
  static const int kAudioDataFieldNumber = 3;
  const ::transcoder::AudioData& audio_data() const;
  ::transcoder::AudioData* mutable_audio_data();
  ::transcoder::AudioData* release_audio_data();
  void set_allocated_audio_data(::transcoder::AudioData* audio_data);

  // optional .transcoder.VideoData video_data = 4;
  bool has_video_data() const;
  void clear_video_data();
  static const int kVideoDataFieldNumber = 4;
  const ::transcoder::VideoData& video_data() const;
  ::transcoder::VideoData* mutable_video_data();
  ::transcoder::VideoData* release_video_data();
  void set_allocated_video_data(::transcoder::VideoData* video_data);

  // optional .transcoder.SegmentData segment_data = 5;
  bool has_segment_data() const;
  void clear_segment_data();
  static const int kSegmentDataFieldNumber = 5;
  const ::transcoder::SegmentData& segment_data() const;
  ::transcoder::SegmentData* mutable_segment_data();
  ::transcoder::SegmentData* release_segment_data();
  void set_allocated_segment_data(::transcoder::SegmentData* segment_data);

  // @@protoc_insertion_point(class_scope:transcoder.TranscodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr media_source_path_;
  ::google::protobuf::internal::ArenaStringPtr media_target_path_;
  ::transcoder::AudioData* audio_data_;
  ::transcoder::VideoData* video_data_;
  ::transcoder::SegmentData* segment_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transcode_2eproto();
  friend void protobuf_AssignDesc_transcode_2eproto();
  friend void protobuf_ShutdownFile_transcode_2eproto();

  void InitAsDefaultInstance();
  static TranscodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class TranscodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcoder.TranscodeResponse) */ {
 public:
  TranscodeResponse();
  virtual ~TranscodeResponse();

  TranscodeResponse(const TranscodeResponse& from);

  inline TranscodeResponse& operator=(const TranscodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TranscodeResponse& default_instance();

  void Swap(TranscodeResponse* other);

  // implements Message ----------------------------------------------

  inline TranscodeResponse* New() const { return New(NULL); }

  TranscodeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranscodeResponse& from);
  void MergeFrom(const TranscodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TranscodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string frame = 1;
  void clear_frame();
  static const int kFrameFieldNumber = 1;
  const ::std::string& frame() const;
  void set_frame(const ::std::string& value);
  void set_frame(const char* value);
  void set_frame(const char* value, size_t size);
  ::std::string* mutable_frame();
  ::std::string* release_frame();
  void set_allocated_frame(::std::string* frame);

  // optional string fps = 2;
  void clear_fps();
  static const int kFpsFieldNumber = 2;
  const ::std::string& fps() const;
  void set_fps(const ::std::string& value);
  void set_fps(const char* value);
  void set_fps(const char* value, size_t size);
  ::std::string* mutable_fps();
  ::std::string* release_fps();
  void set_allocated_fps(::std::string* fps);

  // optional string size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::std::string& size() const;
  void set_size(const ::std::string& value);
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  ::std::string* mutable_size();
  ::std::string* release_size();
  void set_allocated_size(::std::string* size);

  // optional string time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string bitrate = 5;
  void clear_bitrate();
  static const int kBitrateFieldNumber = 5;
  const ::std::string& bitrate() const;
  void set_bitrate(const ::std::string& value);
  void set_bitrate(const char* value);
  void set_bitrate(const char* value, size_t size);
  ::std::string* mutable_bitrate();
  ::std::string* release_bitrate();
  void set_allocated_bitrate(::std::string* bitrate);

  // optional string speed = 6;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  const ::std::string& speed() const;
  void set_speed(const ::std::string& value);
  void set_speed(const char* value);
  void set_speed(const char* value, size_t size);
  ::std::string* mutable_speed();
  ::std::string* release_speed();
  void set_allocated_speed(::std::string* speed);

  // optional string duration = 7;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // optional string out_time = 8;
  void clear_out_time();
  static const int kOutTimeFieldNumber = 8;
  const ::std::string& out_time() const;
  void set_out_time(const ::std::string& value);
  void set_out_time(const char* value);
  void set_out_time(const char* value, size_t size);
  ::std::string* mutable_out_time();
  ::std::string* release_out_time();
  void set_allocated_out_time(::std::string* out_time);

  // @@protoc_insertion_point(class_scope:transcoder.TranscodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr frame_;
  ::google::protobuf::internal::ArenaStringPtr fps_;
  ::google::protobuf::internal::ArenaStringPtr size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr bitrate_;
  ::google::protobuf::internal::ArenaStringPtr speed_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr out_time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transcode_2eproto();
  friend void protobuf_AssignDesc_transcode_2eproto();
  friend void protobuf_ShutdownFile_transcode_2eproto();

  void InitAsDefaultInstance();
  static TranscodeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioData

// optional string sample = 1;
inline void AudioData::clear_sample() {
  sample_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioData::sample() const {
  // @@protoc_insertion_point(field_get:transcoder.AudioData.sample)
  return sample_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioData::set_sample(const ::std::string& value) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.AudioData.sample)
}
inline void AudioData::set_sample(const char* value) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.AudioData.sample)
}
inline void AudioData::set_sample(const char* value, size_t size) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.AudioData.sample)
}
inline ::std::string* AudioData::mutable_sample() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.AudioData.sample)
  return sample_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioData::release_sample() {
  // @@protoc_insertion_point(field_release:transcoder.AudioData.sample)
  
  return sample_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioData::set_allocated_sample(::std::string* sample) {
  if (sample != NULL) {
    
  } else {
    
  }
  sample_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample);
  // @@protoc_insertion_point(field_set_allocated:transcoder.AudioData.sample)
}

// -------------------------------------------------------------------

// VideoData

// optional string frame_size = 1;
inline void VideoData::clear_frame_size() {
  frame_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoData::frame_size() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.frame_size)
  return frame_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_frame_size(const ::std::string& value) {
  
  frame_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.frame_size)
}
inline void VideoData::set_frame_size(const char* value) {
  
  frame_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.frame_size)
}
inline void VideoData::set_frame_size(const char* value, size_t size) {
  
  frame_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.frame_size)
}
inline ::std::string* VideoData::mutable_frame_size() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.frame_size)
  return frame_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoData::release_frame_size() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.frame_size)
  
  return frame_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_allocated_frame_size(::std::string* frame_size) {
  if (frame_size != NULL) {
    
  } else {
    
  }
  frame_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_size);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.frame_size)
}

// optional string frame_aspect = 2;
inline void VideoData::clear_frame_aspect() {
  frame_aspect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoData::frame_aspect() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.frame_aspect)
  return frame_aspect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_frame_aspect(const ::std::string& value) {
  
  frame_aspect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.frame_aspect)
}
inline void VideoData::set_frame_aspect(const char* value) {
  
  frame_aspect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.frame_aspect)
}
inline void VideoData::set_frame_aspect(const char* value, size_t size) {
  
  frame_aspect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.frame_aspect)
}
inline ::std::string* VideoData::mutable_frame_aspect() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.frame_aspect)
  return frame_aspect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoData::release_frame_aspect() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.frame_aspect)
  
  return frame_aspect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_allocated_frame_aspect(::std::string* frame_aspect) {
  if (frame_aspect != NULL) {
    
  } else {
    
  }
  frame_aspect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_aspect);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.frame_aspect)
}

// optional string frame_rate = 3;
inline void VideoData::clear_frame_rate() {
  frame_rate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoData::frame_rate() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.frame_rate)
  return frame_rate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_frame_rate(const ::std::string& value) {
  
  frame_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.frame_rate)
}
inline void VideoData::set_frame_rate(const char* value) {
  
  frame_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.frame_rate)
}
inline void VideoData::set_frame_rate(const char* value, size_t size) {
  
  frame_rate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.frame_rate)
}
inline ::std::string* VideoData::mutable_frame_rate() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.frame_rate)
  return frame_rate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoData::release_frame_rate() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.frame_rate)
  
  return frame_rate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_allocated_frame_rate(::std::string* frame_rate) {
  if (frame_rate != NULL) {
    
  } else {
    
  }
  frame_rate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_rate);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.frame_rate)
}

// optional string rate_bit = 4;
inline void VideoData::clear_rate_bit() {
  rate_bit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoData::rate_bit() const {
  // @@protoc_insertion_point(field_get:transcoder.VideoData.rate_bit)
  return rate_bit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_rate_bit(const ::std::string& value) {
  
  rate_bit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.VideoData.rate_bit)
}
inline void VideoData::set_rate_bit(const char* value) {
  
  rate_bit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.VideoData.rate_bit)
}
inline void VideoData::set_rate_bit(const char* value, size_t size) {
  
  rate_bit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.VideoData.rate_bit)
}
inline ::std::string* VideoData::mutable_rate_bit() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.VideoData.rate_bit)
  return rate_bit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoData::release_rate_bit() {
  // @@protoc_insertion_point(field_release:transcoder.VideoData.rate_bit)
  
  return rate_bit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoData::set_allocated_rate_bit(::std::string* rate_bit) {
  if (rate_bit != NULL) {
    
  } else {
    
  }
  rate_bit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rate_bit);
  // @@protoc_insertion_point(field_set_allocated:transcoder.VideoData.rate_bit)
}

// -------------------------------------------------------------------

// SegmentData

// optional string time = 1;
inline void SegmentData::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SegmentData::time() const {
  // @@protoc_insertion_point(field_get:transcoder.SegmentData.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentData::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.SegmentData.time)
}
inline void SegmentData::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.SegmentData.time)
}
inline void SegmentData::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.SegmentData.time)
}
inline ::std::string* SegmentData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.SegmentData.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegmentData::release_time() {
  // @@protoc_insertion_point(field_release:transcoder.SegmentData.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:transcoder.SegmentData.time)
}

// optional string url_prefix = 2;
inline void SegmentData::clear_url_prefix() {
  url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SegmentData::url_prefix() const {
  // @@protoc_insertion_point(field_get:transcoder.SegmentData.url_prefix)
  return url_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentData::set_url_prefix(const ::std::string& value) {
  
  url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.SegmentData.url_prefix)
}
inline void SegmentData::set_url_prefix(const char* value) {
  
  url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.SegmentData.url_prefix)
}
inline void SegmentData::set_url_prefix(const char* value, size_t size) {
  
  url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.SegmentData.url_prefix)
}
inline ::std::string* SegmentData::mutable_url_prefix() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.SegmentData.url_prefix)
  return url_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegmentData::release_url_prefix() {
  // @@protoc_insertion_point(field_release:transcoder.SegmentData.url_prefix)
  
  return url_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentData::set_allocated_url_prefix(::std::string* url_prefix) {
  if (url_prefix != NULL) {
    
  } else {
    
  }
  url_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_prefix);
  // @@protoc_insertion_point(field_set_allocated:transcoder.SegmentData.url_prefix)
}

// optional string m3u8_name = 3;
inline void SegmentData::clear_m3u8_name() {
  m3u8_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SegmentData::m3u8_name() const {
  // @@protoc_insertion_point(field_get:transcoder.SegmentData.m3u8_name)
  return m3u8_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentData::set_m3u8_name(const ::std::string& value) {
  
  m3u8_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.SegmentData.m3u8_name)
}
inline void SegmentData::set_m3u8_name(const char* value) {
  
  m3u8_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.SegmentData.m3u8_name)
}
inline void SegmentData::set_m3u8_name(const char* value, size_t size) {
  
  m3u8_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.SegmentData.m3u8_name)
}
inline ::std::string* SegmentData::mutable_m3u8_name() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.SegmentData.m3u8_name)
  return m3u8_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegmentData::release_m3u8_name() {
  // @@protoc_insertion_point(field_release:transcoder.SegmentData.m3u8_name)
  
  return m3u8_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentData::set_allocated_m3u8_name(::std::string* m3u8_name) {
  if (m3u8_name != NULL) {
    
  } else {
    
  }
  m3u8_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m3u8_name);
  // @@protoc_insertion_point(field_set_allocated:transcoder.SegmentData.m3u8_name)
}

// -------------------------------------------------------------------

// TranscodeRequest

// optional string media_source_path = 1;
inline void TranscodeRequest::clear_media_source_path() {
  media_source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeRequest::media_source_path() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.media_source_path)
  return media_source_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeRequest::set_media_source_path(const ::std::string& value) {
  
  media_source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeRequest.media_source_path)
}
inline void TranscodeRequest::set_media_source_path(const char* value) {
  
  media_source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeRequest.media_source_path)
}
inline void TranscodeRequest::set_media_source_path(const char* value, size_t size) {
  
  media_source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeRequest.media_source_path)
}
inline ::std::string* TranscodeRequest::mutable_media_source_path() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.media_source_path)
  return media_source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeRequest::release_media_source_path() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.media_source_path)
  
  return media_source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeRequest::set_allocated_media_source_path(::std::string* media_source_path) {
  if (media_source_path != NULL) {
    
  } else {
    
  }
  media_source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_source_path);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.media_source_path)
}

// optional string media_target_path = 2;
inline void TranscodeRequest::clear_media_target_path() {
  media_target_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeRequest::media_target_path() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.media_target_path)
  return media_target_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeRequest::set_media_target_path(const ::std::string& value) {
  
  media_target_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeRequest.media_target_path)
}
inline void TranscodeRequest::set_media_target_path(const char* value) {
  
  media_target_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeRequest.media_target_path)
}
inline void TranscodeRequest::set_media_target_path(const char* value, size_t size) {
  
  media_target_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeRequest.media_target_path)
}
inline ::std::string* TranscodeRequest::mutable_media_target_path() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.media_target_path)
  return media_target_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeRequest::release_media_target_path() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.media_target_path)
  
  return media_target_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeRequest::set_allocated_media_target_path(::std::string* media_target_path) {
  if (media_target_path != NULL) {
    
  } else {
    
  }
  media_target_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_target_path);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.media_target_path)
}

// optional .transcoder.AudioData audio_data = 3;
inline bool TranscodeRequest::has_audio_data() const {
  return !_is_default_instance_ && audio_data_ != NULL;
}
inline void TranscodeRequest::clear_audio_data() {
  if (GetArenaNoVirtual() == NULL && audio_data_ != NULL) delete audio_data_;
  audio_data_ = NULL;
}
inline const ::transcoder::AudioData& TranscodeRequest::audio_data() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.audio_data)
  return audio_data_ != NULL ? *audio_data_ : *default_instance_->audio_data_;
}
inline ::transcoder::AudioData* TranscodeRequest::mutable_audio_data() {
  
  if (audio_data_ == NULL) {
    audio_data_ = new ::transcoder::AudioData;
  }
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.audio_data)
  return audio_data_;
}
inline ::transcoder::AudioData* TranscodeRequest::release_audio_data() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.audio_data)
  
  ::transcoder::AudioData* temp = audio_data_;
  audio_data_ = NULL;
  return temp;
}
inline void TranscodeRequest::set_allocated_audio_data(::transcoder::AudioData* audio_data) {
  delete audio_data_;
  audio_data_ = audio_data;
  if (audio_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.audio_data)
}

// optional .transcoder.VideoData video_data = 4;
inline bool TranscodeRequest::has_video_data() const {
  return !_is_default_instance_ && video_data_ != NULL;
}
inline void TranscodeRequest::clear_video_data() {
  if (GetArenaNoVirtual() == NULL && video_data_ != NULL) delete video_data_;
  video_data_ = NULL;
}
inline const ::transcoder::VideoData& TranscodeRequest::video_data() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.video_data)
  return video_data_ != NULL ? *video_data_ : *default_instance_->video_data_;
}
inline ::transcoder::VideoData* TranscodeRequest::mutable_video_data() {
  
  if (video_data_ == NULL) {
    video_data_ = new ::transcoder::VideoData;
  }
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.video_data)
  return video_data_;
}
inline ::transcoder::VideoData* TranscodeRequest::release_video_data() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.video_data)
  
  ::transcoder::VideoData* temp = video_data_;
  video_data_ = NULL;
  return temp;
}
inline void TranscodeRequest::set_allocated_video_data(::transcoder::VideoData* video_data) {
  delete video_data_;
  video_data_ = video_data;
  if (video_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.video_data)
}

// optional .transcoder.SegmentData segment_data = 5;
inline bool TranscodeRequest::has_segment_data() const {
  return !_is_default_instance_ && segment_data_ != NULL;
}
inline void TranscodeRequest::clear_segment_data() {
  if (GetArenaNoVirtual() == NULL && segment_data_ != NULL) delete segment_data_;
  segment_data_ = NULL;
}
inline const ::transcoder::SegmentData& TranscodeRequest::segment_data() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeRequest.segment_data)
  return segment_data_ != NULL ? *segment_data_ : *default_instance_->segment_data_;
}
inline ::transcoder::SegmentData* TranscodeRequest::mutable_segment_data() {
  
  if (segment_data_ == NULL) {
    segment_data_ = new ::transcoder::SegmentData;
  }
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeRequest.segment_data)
  return segment_data_;
}
inline ::transcoder::SegmentData* TranscodeRequest::release_segment_data() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeRequest.segment_data)
  
  ::transcoder::SegmentData* temp = segment_data_;
  segment_data_ = NULL;
  return temp;
}
inline void TranscodeRequest::set_allocated_segment_data(::transcoder::SegmentData* segment_data) {
  delete segment_data_;
  segment_data_ = segment_data;
  if (segment_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeRequest.segment_data)
}

// -------------------------------------------------------------------

// TranscodeResponse

// optional string frame = 1;
inline void TranscodeResponse::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::frame() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.frame)
  return frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_frame(const ::std::string& value) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.frame)
}
inline void TranscodeResponse::set_frame(const char* value) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.frame)
}
inline void TranscodeResponse::set_frame(const char* value, size_t size) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.frame)
}
inline ::std::string* TranscodeResponse::mutable_frame() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_frame() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.frame)
  
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    
  } else {
    
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.frame)
}

// optional string fps = 2;
inline void TranscodeResponse::clear_fps() {
  fps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::fps() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.fps)
  return fps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_fps(const ::std::string& value) {
  
  fps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.fps)
}
inline void TranscodeResponse::set_fps(const char* value) {
  
  fps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.fps)
}
inline void TranscodeResponse::set_fps(const char* value, size_t size) {
  
  fps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.fps)
}
inline ::std::string* TranscodeResponse::mutable_fps() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.fps)
  return fps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_fps() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.fps)
  
  return fps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_fps(::std::string* fps) {
  if (fps != NULL) {
    
  } else {
    
  }
  fps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fps);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.fps)
}

// optional string size = 3;
inline void TranscodeResponse::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::size() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.size)
  return size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_size(const ::std::string& value) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.size)
}
inline void TranscodeResponse::set_size(const char* value) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.size)
}
inline void TranscodeResponse::set_size(const char* value, size_t size) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.size)
}
inline ::std::string* TranscodeResponse::mutable_size() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_size() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.size)
  
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    
  } else {
    
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.size)
}

// optional string time = 4;
inline void TranscodeResponse::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::time() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.time)
}
inline void TranscodeResponse::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.time)
}
inline void TranscodeResponse::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.time)
}
inline ::std::string* TranscodeResponse::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_time() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.time)
}

// optional string bitrate = 5;
inline void TranscodeResponse::clear_bitrate() {
  bitrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::bitrate() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.bitrate)
  return bitrate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_bitrate(const ::std::string& value) {
  
  bitrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.bitrate)
}
inline void TranscodeResponse::set_bitrate(const char* value) {
  
  bitrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.bitrate)
}
inline void TranscodeResponse::set_bitrate(const char* value, size_t size) {
  
  bitrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.bitrate)
}
inline ::std::string* TranscodeResponse::mutable_bitrate() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.bitrate)
  return bitrate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_bitrate() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.bitrate)
  
  return bitrate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_bitrate(::std::string* bitrate) {
  if (bitrate != NULL) {
    
  } else {
    
  }
  bitrate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.bitrate)
}

// optional string speed = 6;
inline void TranscodeResponse::clear_speed() {
  speed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::speed() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.speed)
  return speed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_speed(const ::std::string& value) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.speed)
}
inline void TranscodeResponse::set_speed(const char* value) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.speed)
}
inline void TranscodeResponse::set_speed(const char* value, size_t size) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.speed)
}
inline ::std::string* TranscodeResponse::mutable_speed() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.speed)
  return speed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_speed() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.speed)
  
  return speed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_speed(::std::string* speed) {
  if (speed != NULL) {
    
  } else {
    
  }
  speed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speed);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.speed)
}

// optional string duration = 7;
inline void TranscodeResponse::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::duration() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.duration)
  return duration_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.duration)
}
inline void TranscodeResponse::set_duration(const char* value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.duration)
}
inline void TranscodeResponse::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.duration)
}
inline ::std::string* TranscodeResponse::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_duration() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.duration)
}

// optional string out_time = 8;
inline void TranscodeResponse::clear_out_time() {
  out_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranscodeResponse::out_time() const {
  // @@protoc_insertion_point(field_get:transcoder.TranscodeResponse.out_time)
  return out_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_out_time(const ::std::string& value) {
  
  out_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcoder.TranscodeResponse.out_time)
}
inline void TranscodeResponse::set_out_time(const char* value) {
  
  out_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcoder.TranscodeResponse.out_time)
}
inline void TranscodeResponse::set_out_time(const char* value, size_t size) {
  
  out_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcoder.TranscodeResponse.out_time)
}
inline ::std::string* TranscodeResponse::mutable_out_time() {
  
  // @@protoc_insertion_point(field_mutable:transcoder.TranscodeResponse.out_time)
  return out_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranscodeResponse::release_out_time() {
  // @@protoc_insertion_point(field_release:transcoder.TranscodeResponse.out_time)
  
  return out_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranscodeResponse::set_allocated_out_time(::std::string* out_time) {
  if (out_time != NULL) {
    
  } else {
    
  }
  out_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_time);
  // @@protoc_insertion_point(field_set_allocated:transcoder.TranscodeResponse.out_time)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transcoder

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transcode_2eproto__INCLUDED
