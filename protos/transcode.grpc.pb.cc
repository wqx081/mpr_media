// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: transcode.proto

#include "transcode.pb.h"
#include "transcode.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace transcoder {

static const char* Transcoder_method_names[] = {
  "/transcoder.Transcoder/Transcode",
};

std::unique_ptr< Transcoder::Stub> Transcoder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Transcoder::Stub> stub(new Transcoder::Stub(channel));
  return stub;
}

Transcoder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Transcode_(Transcoder_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::transcoder::TranscodeResponse>* Transcoder::Stub::TranscodeRaw(::grpc::ClientContext* context, const ::transcoder::TranscodeRequest& request) {
  return new ::grpc::ClientReader< ::transcoder::TranscodeResponse>(channel_.get(), rpcmethod_Transcode_, context, request);
}

::grpc::ClientAsyncReader< ::transcoder::TranscodeResponse>* Transcoder::Stub::AsyncTranscodeRaw(::grpc::ClientContext* context, const ::transcoder::TranscodeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::transcoder::TranscodeResponse>(channel_.get(), cq, rpcmethod_Transcode_, context, request, tag);
}

Transcoder::Service::Service() {
  (void)Transcoder_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Transcoder_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Transcoder::Service, ::transcoder::TranscodeRequest, ::transcoder::TranscodeResponse>(
          std::mem_fn(&Transcoder::Service::Transcode), this)));
}

Transcoder::Service::~Service() {
}

::grpc::Status Transcoder::Service::Transcode(::grpc::ServerContext* context, const ::transcoder::TranscodeRequest* request, ::grpc::ServerWriter< ::transcoder::TranscodeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace transcoder

